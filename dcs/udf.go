package dcs

import (
	"mpp/layout"
	"strconv"
)

//todo:
// - use camelCase for temp variable names
// - global level vars (applicable for all MPs) move outside (then consider to be generated automatically), e.g.
// - RIDER_MAX, slice initiazation

func StageFn(mp *layout.MpData) (out *layout.MpData, err error) {
	// Don't change - populate input fields
	PopulateInputFields(mp)
	In := mp.Input
	Out := mp.Output
	//# Don't change

	BasicCoiDiscTier := make([]float64, discCount)
	RidRiTreaty := make([]string, ridRiCount)
	RidRiIcg := make([]string, ridRiCount)
	BenCode := make([]string, benCount)
	IfrsCcfExternal := make([]int, ifrsCcfCount)
	AltAnnPremA := make([]float64, 15)
	AltPremCounter := make([]float64, 15)

	//array_resize
	var RI_BASE_MAX int = 5
	var MAX_AGE_MED int = 64
	RIDER_MAX := ReadCacheInt("rider_max", "RIDER_MAX_COUNT", "RIDER_MAX")
	RI_BASE_IDX := make([]int, RI_BASE_MAX)
	RIDER_IDX := make([]int, RIDER_MAX)
	RIDER_SA := make([]float64, RIDER_MAX)
	RIDER_PREM := make([]float64, RIDER_MAX)
	RIDER_POL_TERM_M := make([]int, RIDER_MAX)
	RIDER_PREM_TERM_M := make([]int, RIDER_MAX)
	RIDER_VERSION_IDX := make([]int, RIDER_MAX)
	RIDER_BEN_IDX := make([]int, RIDER_MAX)
	RIDER_LOAD_PC := make([]float64, RIDER_MAX)
	RIDER_LOAD_AMT := make([]float64, RIDER_MAX)
	RIDER_SA_GIO := make([]float64, RIDER_MAX)
	RIDER_SA_XSA := make([]float64, RIDER_MAX)
	RIDER_POL_TERM_M_GIO := make([]float64, RIDER_MAX)
	RIDER_POL_TERM_M_XSA := make([]float64, RIDER_MAX)
	RI_RIDER_CED_PC := make([]float64, RIDER_MAX)
	RI_RIDER_IDX := make([]int, RIDER_MAX)
	IFRS_RI_ICG_ID_TREATY_RID := make([]string, RIDER_MAX)
	TREATY_ID_TREATY_RID := make([]string, RIDER_MAX)
	IfrsRiderCode := make([]string, RIDER_MAX)
	IFRS_CCF_EXTERNAL := make([]int, 14)

	for i := 0; i < 3; i++ {
		BasicCoiDiscTier[i] = ReadCacheFloat("dedn_disc", strconv.Itoa(i+1), "BASIC_COI_DISC_TIER")
	}
	RI_BASE_IDX[0] = In.RI_TABLE_IND*4 + In.SEX*2 + In.SMOKER_STAT + 1

	if In.RI_TABLE_IND == 6 {
		RI_BASE_IDX[1] = In.OCC_CLASS*2 + In.SEX + 1 + 1
	} else {
		RI_BASE_IDX[1] = 1
	}
	Out.ACDB_POL_TERM_M = (70 - float64(Out.AGE_AT_ENTRY) + 1) * 12

	CURR_IND := ReadCacheInt("param_dcs", In.PROD_NAME, "CURR_IND")
	HYBRID_IND := ReadCacheInt("param_dcs", In.PROD_NAME, "HYBRID_IND")
	PAA_PLUS_IND := ReadCacheInt("param_dcs", In.PROD_NAME, "PAA_PLUS_IND")
	UEPAAR_IND := ReadCacheInt("param_dcs", In.PROD_NAME, "UEPAAR_IND")
	MORT_TAB_IND := ReadCacheInt("param_dcs", In.PROD_NAME, "MORT_TAB_IND")
	LIMIT_PAY_IND := ReadCacheInt("param_dcs", In.PROD_NAME, "LIMIT_IND")
	PART_SURR_METHOD := ReadCacheInt("param_dcs", In.PROD_NAME, "PART_SURR_METHOD")
	UNIT_BONUS_METHOD := ReadCacheInt("param_dcs", In.PROD_NAME, "UNIT_BONUS_METHOD")
	WP_CODE := ReadCacheInt("param_dcs", In.PROD_NAME, "WP_CODE")
	SP_CODE := ReadCacheInt("param_dcs", In.PROD_NAME, "SP_CODE")
	PEP1_CODE := ReadCacheInt("param_dcs", In.PROD_NAME, "PEP1_CODE")
	PEP2_CODE := ReadCacheInt("param_dcs", In.PROD_NAME, "PEP2_CODE")
	PWAIV1_METHOD := ReadCacheInt("param_dcs", In.PROD_NAME, "PWAIV1_METHOD")
	PWAIV2_METHOD := ReadCacheInt("param_dcs", In.PROD_NAME, "PWAIV2_METHOD")
	TERM_LIFE3_IND := ReadCacheInt("param_dcs", In.PROD_NAME, "TERM_LIFE3_IND")
	RI_CC_YN := ReadCacheInt("param_dcs", In.PROD_NAME, "RI_CC_YN")

	RIDER_SEL_ACDTH := ReadCacheInt("rider_sel", In.PROD_NAME, "RIDER_SEL_ACDTH")
	RIDER_SEL_ACDMB := ReadCacheInt("rider_sel", In.PROD_NAME, "RIDER_SEL_ACDMB")
	RIDER_SEL_PWAIV1 := ReadCacheInt("rider_sel", In.PROD_NAME, "RIDER_SEL_PWAIV1")
	RIDER_SEL_PWAIV2 := ReadCacheInt("rider_sel", In.PROD_NAME, "RIDER_SEL_PWAIV2")
	RIDER_SEL_PRU_MED := ReadCacheInt("rider_sel", In.PROD_NAME, "RIDER_SEL_PRU_MED")
	RIDER_SEL_ADD_CC := ReadCacheInt("rider_sel", In.PROD_NAME, "RIDER_SEL_ADD_CC")
	RIDER_SEL_MEDICAL := ReadCacheInt("rider_sel", In.PROD_NAME, "RIDER_SEL_MEDICAL")
	RIDER_SEL_TERM1 := ReadCacheInt("rider_sel", In.PROD_NAME, "RIDER_SEL_TERM1")
	RIDER_SEL_REIN := ReadCacheInt("rider_sel", In.PROD_NAME, "RIDER_SEL_REIN")
	RIDER_SEL_MCC := ReadCacheInt("rider_sel", In.PROD_NAME, "RIDER_SEL_MCC")
	RIDER_SEL_CINCOME := ReadCacheInt("rider_sel", In.PROD_NAME, "RIDER_SEL_CINCOME")
	RIDER_SEL_ESCC := ReadCacheInt("rider_sel", In.PROD_NAME, "RIDER_SEL_ESCC")
	RIDER_SEL_PRNTL := ReadCacheInt("rider_sel", In.PROD_NAME, "RIDER_SEL_PRNTL")
	RIDER_SEL_JUVCI := ReadCacheInt("rider_sel", In.PROD_NAME, "RIDER_SEL_JUVCI")
	RIDER_SEL_PEP1 := ReadCacheInt("rider_sel", In.PROD_NAME, "RIDER_SEL_PEP1")
	RIDER_SEL_PEP2 := ReadCacheInt("rider_sel", In.PROD_NAME, "RIDER_SEL_PEP2")
	RIDER_SEL_CCB61 := ReadCacheInt("rider_sel", In.PROD_NAME, "RIDER_SEL_CCB61")
	RIDER_SEL_CI := ReadCacheInt("rider_sel", In.PROD_NAME, "RIDER_SEL_CI")
	RIDER_SEL_TPD := ReadCacheInt("rider_sel", In.PROD_NAME, "RIDER_SEL_TPD")
	RIDER_SEL_PPH_PLUS := ReadCacheInt("rider_sel", In.PROD_NAME, "RIDER_SEL_PPH_PLUS")
	RIDER_SEL_CICA_ESCC := ReadCacheInt("rider_sel", In.PROD_NAME, "RIDER_SEL_CICA_ESCC")
	RIDER_SEL_CICA_CCB61 := ReadCacheInt("rider_sel", In.PROD_NAME, "RIDER_SEL_CICA_CCB61")
	RIDER_SEL_CICA_CCB34 := ReadCacheInt("rider_sel", In.PROD_NAME, "RIDER_SEL_CICA_CCB34")
	RIDER_SEL_PPH_PLUS_PRO := ReadCacheInt("rider_sel", In.PROD_NAME, "RIDER_SEL_PPH_PLUS_PRO")
	RIDER_SEL_CC := ReadCacheInt("rider_sel", In.PROD_NAME, "RIDER_SEL_CC")
	RIDER_SEL_PWAIV3 := ReadCacheInt("rider_sel", In.PROD_NAME, "RIDER_SEL_PWAIV3")
	RIDER_SEL_TERM2 := ReadCacheInt("rider_sel", In.PROD_NAME, "RIDER_SEL_TERM2")
	RIDER_SEL_TERM3 := ReadCacheInt("rider_sel", In.PROD_NAME, "RIDER_SEL_TERM3")

	RIDER_SEL_GIO_ACDMB := ReadCacheInt("rider_sel_gio", In.PROD_NAME, "RIDER_SEL_GIO_ACDMB")
	RIDER_SEL_GIO_ADD_CC := ReadCacheInt("rider_sel_gio", In.PROD_NAME, "RIDER_SEL_GIO_ADD_CC")
	RIDER_SEL_GIO_CCB61 := ReadCacheInt("rider_sel_gio", In.PROD_NAME, "RIDER_SEL_GIO_CCB61")
	RIDER_SEL_GIO_CICA_CCB34 := ReadCacheInt("rider_sel_gio", In.PROD_NAME, "RIDER_SEL_GIO_CICA_CCB34")
	RIDER_SEL_GIO_CICA_CCB61 := ReadCacheInt("rider_sel_gio", In.PROD_NAME, "RIDER_SEL_GIO_CICA_CCB61")
	RIDER_SEL_GIO_CICA_ESCC := ReadCacheInt("rider_sel_gio", In.PROD_NAME, "RIDER_SEL_GIO_CICA_ESCC")
	RIDER_SEL_GIO_ESCC := ReadCacheInt("rider_sel_gio", In.PROD_NAME, "RIDER_SEL_GIO_ESCC")
	RIDER_SEL_GIO_TERM := ReadCacheInt("rider_sel_gio", In.PROD_NAME, "RIDER_SEL_GIO_TERM")

	Out.CC_LOAD_PC = In.CC_LOAD_PERC * 100
	Out.DTH_LOAD_PC = In.BASIC_LOAD_PERC * 100
	Out.SUBFUND_PC_1 = 100
	Out.EXP_A_IDX = In.EXP_IND_B
	Out.EXP_C_IDX = In.EXP_IND_R

	//TEMP_VAR
	Out.TEMP_PW_FLAG = In.PW_IND_USED
	Out.TEMP_TERM_BEN = In.TERM_BEN
	Out.TEMP_PLAN_PRNTL = In.PLAN_PRNTL
	TEMP_PLAN_PRNTL_str := strconv.Itoa(Out.TEMP_PLAN_PRNTL)
	Out.TEMP_PRNTL_BEN = ReadCacheFloat("rider_prenatal_ben", TEMP_PLAN_PRNTL_str, "PRNTL_BEN")

	if In.LIFE2_TERM_AGE_AE > 0 && In.LIFE2_AGE_AE == 0 {
		Out.AGE_AT_ENTRY2 = In.LIFE2_TERM_AGE_AE
	}
	if In.LIFE3_TERM_AGE_AE > 0 && In.LIFE3_AGE_AE == 0 {
		Out.AGE_AT_ENTRY3 = In.LIFE3_AGE_AE
	}

	if UEPAAR_IND == 1 {
		if In.PPH_PLUS_BEN != 0 {
			In.TREATY_ID_TREATY22 = In.TREATY_ID_TREATY9
			In.IFRS_RI_ICG_ID_TREATY22 = In.IFRS_RI_ICG_ID_TREATY9

			In.TREATY_ID_TREATY9 = "9999"
			In.IFRS_RI_ICG_ID_TREATY9 = "9999"
		}
	}

	//todo: table to map (to simplify)
	PopulateStringEnum(In, RidRiTreaty, Enums["ridRiTreaty"])
	PopulateStringEnum(In, RidRiIcg, Enums["ridRiIcg"])
	PopulateStringEnum(In, BenCode, Enums["benCode"])

	if PAA_PLUS_IND == 1 {
		BenCode[2] = In.WAI_CODE
		BenCode[3] = In.SPO1_CODE
		BenCode[25] = In.SPO2_CODE
	} else {
		BenCode[25] = In.SPO_CODE
		if In.PWAI2_BEN > 0 && In.LIFE3_AGE_AE > 0 {
			BenCode[3] = In.WAI_CODE
		} else {
			BenCode[3] = In.SPO_CODE
		}
	}

	if In.PWAI2_BEN > 0 && In.LIFE3_AGE_AE > 0 {
		RidRiIcg[3] = In.IFRS_RI_ICG_ID_TREATY5
		RidRiIcg[25] = In.IFRS_RI_ICG_ID_TREATY6
		RidRiTreaty[3] = In.TREATY_ID_TREATY5
		RidRiTreaty[25] = In.TREATY_ID_TREATY6
	} else {
		RidRiIcg[3] = In.IFRS_RI_ICG_ID_TREATY6
		RidRiIcg[25] = In.IFRS_RI_ICG_ID_TREATY6
		RidRiTreaty[3] = In.TREATY_ID_TREATY6
		RidRiTreaty[25] = In.TREATY_ID_TREATY6
	}

	//
	PopulateIntEnum(In, IfrsCcfExternal, Enums["ifrsCcfExternal"])

	//rider preparation
	var MEDICAL_BEN2 float64 = 0
	var REIN_PREM_MED float64 = 0
	var REIN_BEN float64
	if In.PLAN_MED > 0 {
		if In.HSPLUS_IND != 0 || CURR_IND == 2 {
			MEDICAL_BEN2 = In.MEDICAL_BEN
		} else {
			MEDICAL_BEN2 = ReadCacheFloat("rider_medical_ben2", strconv.Itoa(In.PLAN_MED), "MEDICAL_BEN2")
		}
		REIN_BEN := -REIN_PREM_MED * MEDICAL_BEN2
		REIN_BEN = REIN_BEN
	}

	var NEW_MORT_TAB_IND int
	if MORT_TAB_IND == 4 {
		NEW_MORT_TAB_IND = 1
	} else {
		NEW_MORT_TAB_IND = 0
	}
	NEW_MORT_TAB_IND = NEW_MORT_TAB_IND

	//rider1
	var RIDER_COUNT int = 0
	if In.ACDTH_BEN > 0 && RIDER_SEL_ACDTH == 1 {
		RIDER_IDX[RIDER_COUNT] = 1
		RIDER_SA[RIDER_COUNT] = In.ACDTH_BEN
		RIDER_PREM[RIDER_COUNT] = 0
		RIDER_POL_TERM_M[RIDER_COUNT] = (In.MAX_AGE_AD - In.AGE_AT_ENTRY + 1) * 12
		RIDER_PREM_TERM_M[RIDER_COUNT] = 0
		RIDER_VERSION_IDX[RIDER_COUNT] = In.ACDTH_IND + 1
		RIDER_BEN_IDX[RIDER_COUNT] = In.OCC_CLASS + NEW_MORT_TAB_IND*3
		RIDER_LOAD_PC[RIDER_COUNT] = float64(In.AD_LOAD_PERC) * 100
		RIDER_LOAD_AMT[RIDER_COUNT] = float64(In.AD_LOAD_ADJ)

		RI_RIDER_CED_PC[RIDER_COUNT] = In.RI_ACDTH_BEN_PC
		RI_RIDER_IDX[RIDER_COUNT] = In.RI_AD_IND*3 + In.OCC_CLASS
		RIDER_COUNT = RIDER_COUNT + 1
	}

	//rider2
	pol_num := strconv.Itoa(In.POL_NUMBER)
	if In.ACDMB_BEN > 0 && RIDER_SEL_ACDMB == 1 {
		RIDER_IDX[RIDER_COUNT] = 2
		RIDER_SA[RIDER_COUNT] = In.ACDMB_BEN
		RIDER_PREM[RIDER_COUNT] = 0
		RIDER_POL_TERM_M[RIDER_COUNT] = (In.MAX_AGE_ADD - In.AGE_AT_ENTRY + 1) * 12
		RIDER_PREM_TERM_M[RIDER_COUNT] = 0
		RIDER_VERSION_IDX[RIDER_COUNT] = In.ACDMB_IND + 1
		RIDER_BEN_IDX[RIDER_COUNT] = In.OCC_CLASS + NEW_MORT_TAB_IND*3
		RIDER_LOAD_PC[RIDER_COUNT] = float64(In.ADD_LOAD_PERC) * 100
		RIDER_LOAD_AMT[RIDER_COUNT] = float64(In.ADD_LOAD_ADJ)

		if RIDER_SEL_GIO_ACDMB == 1 {
			RIDER_SA_GIO[RIDER_COUNT] = ReadCacheFloat("campaign_gio_2", pol_num, "ACDMB_BEN_GIO")
			RIDER_SA_XSA[RIDER_COUNT] = ReadCacheFloat("campaign_xsa", pol_num, "ACDMB_BEN_XSA")
			RIDER_POL_TERM_M_GIO[RIDER_COUNT] = ReadCacheFloat("campaign_gio_2", pol_num, "GIO_EXTRA_MORB_TERM_M_ACDMB") + float64(In.DURATIONIF_M)
			RIDER_POL_TERM_M_XSA[RIDER_COUNT] = ReadCacheFloat("campaign_xsa", pol_num, "XSA_EXTRA_MORB_TERM_M_ACDMB") + float64(In.DURATIONIF_M)
		}
		RI_RIDER_CED_PC[RIDER_COUNT] = In.RI_ACDMB_BEN_PC
		RI_RIDER_IDX[RIDER_COUNT] = In.RI_AD_IND*3 + In.OCC_CLASS
		RIDER_COUNT = RIDER_COUNT + 1
	}
	//rider3
	if In.PWAIV_BEN > 0 && (In.CESS_AGE_WP > 0 || PWAIV1_METHOD == 1) && RIDER_SEL_PWAIV1 == 1 {
		RIDER_IDX[RIDER_COUNT] = 3
		RIDER_SA[RIDER_COUNT] = In.PWAIV_BEN
		RIDER_PREM[RIDER_COUNT] = 0
		RIDER_PREM_TERM_M[RIDER_COUNT] = 0
		RIDER_VERSION_IDX[RIDER_COUNT] = In.WOP_ESCC_IND + 1
		if TEMP_RIDER_MAX_AGE_IND == "Y" {
			if PWAIV1_METHOD == 1 {
				RIDER_BEN_IDX[RIDER_COUNT] = In.WP
				RIDER_POL_TERM_M[RIDER_COUNT] = ReadCacheInt("rider_pwaiv1_method1", strconv.Itoa(RIDER_BEN_IDX[RIDER_COUNT]), "RIDER_POL_TERM_M")
			} else {
				RIDER_BEN_IDX[RIDER_COUNT] = ReadCacheInt("rider_wp_index", strconv.Itoa(WP_CODE), strconv.Itoa(In.CESS_AGE_WP), strconv.Itoa(In.SEX), strconv.Itoa(In.SMOKER_STAT), strconv.Itoa(In.WOP_ESCC_IND), "WP_IND")
				RIDER_POL_TERM_M[RIDER_COUNT] = (In.MAX_AGE_WAIV - In.AGE_AT_ENTRY + 1) * 12
			}
		} else {
			if PWAIV1_METHOD == 1 {
				RIDER_BEN_IDX[RIDER_COUNT] = In.WP
				RIDER_POL_TERM_M[RIDER_COUNT] = ReadCacheInt("rider_pwaiv1_method1", strconv.Itoa(RIDER_BEN_IDX[RIDER_COUNT]), "RIDER_POL_TERM_M")
			} else {
				RIDER_BEN_IDX[RIDER_COUNT] = ReadCacheInt("rider_wp_index", strconv.Itoa(WP_CODE), strconv.Itoa(In.CESS_AGE_WP), strconv.Itoa(In.SEX), strconv.Itoa(In.SMOKER_STAT), strconv.Itoa(In.WOP_ESCC_IND), "WP_IND")
				if In.CESS_AGE_WP == 10 {
					RIDER_POL_TERM_M[RIDER_COUNT] = min(In.CESS_AGE_WP, In.MAX_AGE_WAIV-In.AGE_AT_ENTRY+1) * 12
				} else {
					RIDER_POL_TERM_M[RIDER_COUNT] = (min(In.CESS_AGE_WP, In.MAX_AGE_WAIV) - In.AGE_AT_ENTRY + 1) * 12
				}
			}
		}
		RIDER_LOAD_PC[RIDER_COUNT] = float64(In.WAI_LOAD_PERC) * 100
		RIDER_LOAD_AMT[RIDER_COUNT] = float64(In.WAI_LOAD_ADJ)
		RI_RIDER_CED_PC[RIDER_COUNT] = In.RI_PWAIV_BEN_PC
		if In.WOP_ESCC_IND == 0 {
			RI_RIDER_IDX[RIDER_COUNT] = In.RI_WAI_IND*4 + In.SEX*2 + In.SMOKER_STAT + 1
		} else {
			RI_RIDER_IDX[RIDER_COUNT] = In.RI_TABLE_IND*4 + In.SEX*2 + In.SMOKER_STAT + 1 + 16
		}
		RIDER_COUNT = RIDER_COUNT + 1
	}
	//rider4
	if In.PWAI2_BEN > 0 && (In.CESS_AGE_SP > 0 || PWAIV2_METHOD == 1) && RIDER_SEL_PWAIV2 == 1 {
		RIDER_IDX[RIDER_COUNT] = 4
		RIDER_SA[RIDER_COUNT] = In.PWAI2_BEN
		RIDER_PREM[RIDER_COUNT] = 0
		RIDER_PREM_TERM_M[RIDER_COUNT] = 0
		if In.LIFE3_AGE_AE == 0 || In.WOP_ESCC_IND == 0 || SWITCH_WOP_CORRECT_YN == "Y" {
			RIDER_VERSION_IDX[RIDER_COUNT] = In.WOP2_ESCC_IND + 1
		} else {
			RIDER_VERSION_IDX[RIDER_COUNT] = In.WOP2_ESCC_IND + 3
		}
		if TEMP_RIDER_MAX_AGE_IND == "Y" {
			if PWAIV2_METHOD == 1 {
				RIDER_BEN_IDX[RIDER_COUNT] = ReadCacheInt("rider_pwaiv2_method1", strconv.FormatFloat(In.SP_TERM, 'f', -1, 64), "RIDER_BEN_IDX")
				RIDER_POL_TERM_M[RIDER_COUNT] = int(In.SP_TERM-1) * 12
			} else {
				RIDER_BEN_IDX[RIDER_COUNT] = ReadCacheInt("rider_sp_index", strconv.Itoa(SP_CODE), strconv.Itoa(In.CESS_AGE_SP), strconv.Itoa(In.WOP2_ESCC_IND), "SP_IND")
				RIDER_POL_TERM_M[RIDER_COUNT] = (In.MAX_AGE_WAIV2 - In.AGE_AT_ENTRY + 1) * 12
			}
		} else {
			if PWAIV2_METHOD == 1 {
				RIDER_BEN_IDX[RIDER_COUNT] = ReadCacheInt("rider_pwaiv2_method1", strconv.FormatFloat(In.SP_TERM, 'f', -1, 64), "RIDER_BEN_IDX")
				RIDER_POL_TERM_M[RIDER_COUNT] = int(In.SP_TERM-1) * 12
			} else {
				RIDER_BEN_IDX[RIDER_COUNT] = ReadCacheInt("rider_sp_index", strconv.Itoa(SP_CODE), strconv.Itoa(In.CESS_AGE_SP), strconv.Itoa(In.WOP2_ESCC_IND), "SP_IND")
				if PWAIV2_METHOD == 2 {
					if In.CESS_AGE_SP == 10 {
						RIDER_POL_TERM_M[RIDER_COUNT] = min(In.CESS_AGE_WP, (In.MAX_AGE_WAIV2-In.AGE_AT_ENTRY+1)) * 12
					} else {
						RIDER_POL_TERM_M[RIDER_COUNT] = (min(In.CESS_AGE_WP, In.MAX_AGE_WAIV2) - In.AGE_AT_ENTRY + 1) * 12
					}
				} else {
					if In.CESS_AGE_SP == 10 || In.CESS_AGE_SP == 17 || In.CESS_AGE_SP == 24 {
						RIDER_POL_TERM_M[RIDER_COUNT] = (min(In.CESS_AGE_WP, In.MAX_AGE_WAIV2-In.AGE_AT_ENTRY+1)) * 12
					} else if In.CESS_AGE_SP > 25 {
						RIDER_POL_TERM_M[RIDER_COUNT] = min((In.CESS_AGE_SP-In.LIFE2_AGE_AE+1), (In.MAX_AGE_WAIV2-In.AGE_AT_ENTRY+1)) * 12
					} else {
						RIDER_POL_TERM_M[RIDER_COUNT] = (In.MAX_AGE_WAIV2 - In.AGE_AT_ENTRY + 1) * 12
					}
				}
			}
		}
		RIDER_LOAD_PC[RIDER_COUNT] = float64(In.SPO_LOAD_PERC) * 100
		RIDER_LOAD_AMT[RIDER_COUNT] = float64(In.SPO_LOAD_ADJ)
		RI_RIDER_CED_PC[RIDER_COUNT] = In.RI_PWAI2_BEN_PC

		if In.WOP2_ESCC_IND == 0 {
			RI_RIDER_IDX[RIDER_COUNT] = In.RI_WAI2_IND*4 + In.SEX*2 + In.SMOKER_STAT + 1
		} else {
			RI_RIDER_IDX[RIDER_COUNT] = In.RI_TABLE_IND*4 + In.SEX*2 + In.SMOKER_STAT + 1 + 16
		}
		RIDER_COUNT = RIDER_COUNT + 1
	}
	//rider5
	if In.PRU_MED_BEN > 0 && RIDER_SEL_PRU_MED == 1 {
		RIDER_IDX[RIDER_COUNT] = 5
		RIDER_SA[RIDER_COUNT] = In.PRU_MED_BEN
		RIDER_PREM[RIDER_COUNT] = 0
		RIDER_POL_TERM_M[RIDER_COUNT] = (In.MAX_AGE_PMED - In.AGE_AT_ENTRY + 1) * 12
		RIDER_PREM_TERM_M[RIDER_COUNT] = 0
		RIDER_VERSION_IDX[RIDER_COUNT] = 0
		RIDER_BEN_IDX[RIDER_COUNT] = (In.SEX + CURR_IND) + 1
		RIDER_LOAD_PC[RIDER_COUNT] = float64(In.MED_LOAD_PERC) * 100
		RIDER_LOAD_AMT[RIDER_COUNT] = 0
		RI_RIDER_CED_PC[RIDER_COUNT] = In.RI_PRU_MED_BEN_PC
		RI_RIDER_IDX[RIDER_COUNT] = In.RI_MED_IND*2 + CURR_IND/2 + 1
		RIDER_COUNT = RIDER_COUNT + 1
	}
	//rider 6
	if In.ADD_CC_BEN > 0 && RIDER_SEL_ADD_CC == 1 {
		RIDER_IDX[RIDER_COUNT] = 6
		RIDER_SA[RIDER_COUNT] = In.ADD_CC_BEN
		RIDER_PREM[RIDER_COUNT] = 0
		if TEMP_RIDER_MAX_AGE_IND == "Y" {
			RIDER_POL_TERM_M[RIDER_COUNT] = (In.MAX_AGE_ADD_CC - In.AGE_AT_ENTRY + 1) * 12
		} else {
			RIDER_POL_TERM_M[RIDER_COUNT] = (In.MAX_AGE_ADD_CC-In.AGE_AT_ENTRY+1)*12 - 12
		}
		RIDER_PREM_TERM_M[RIDER_COUNT] = 0
		RIDER_VERSION_IDX[RIDER_COUNT] = 0
		if LIMIT_PAY_IND == 1 {
			RIDER_BEN_IDX[RIDER_COUNT] = ReadCacheInt("rider_cc_index", strconv.Itoa(In.PLAN_CC), strconv.Itoa(In.SEX), strconv.Itoa(In.SMOKER_STAT), "CC_IND")
		} else {
			RIDER_BEN_IDX[RIDER_COUNT] = ReadCacheInt("rider_cc_index", strconv.Itoa(In.PLAN_CCP), strconv.Itoa(In.SEX), strconv.Itoa(In.SMOKER_STAT), "CC_IND")
		}
		RIDER_LOAD_PC[RIDER_COUNT] = float64(In.CCP_LOAD_PERC) * 100
		RIDER_LOAD_AMT[RIDER_COUNT] = float64(In.CCP_LOAD_ADJ)
		if RIDER_SEL_GIO_ADD_CC == 1 {
			RIDER_SA_GIO[RIDER_COUNT] = ReadCacheFloat("campaign_gio_2", pol_num, "ADD_CC_BEN_GIO")
			RIDER_SA_XSA[RIDER_COUNT] = ReadCacheFloat("campaign_xsa", pol_num, "ADD_CC_BEN_XSA")
			RIDER_POL_TERM_M_GIO[RIDER_COUNT] = ReadCacheFloat("campaign_gio_2", pol_num, "GIO_EXTRA_MORB_TERM_M_ADD_CC") + float64(In.DURATIONIF_M)
			RIDER_POL_TERM_M_XSA[RIDER_COUNT] = ReadCacheFloat("campaign_xsa", pol_num, "XSA_EXTRA_MORB_TERM_M_ADD_CC") + float64(In.DURATIONIF_M)
		}
		RI_RIDER_CED_PC[RIDER_COUNT] = In.RI_ADD_CC_BEN_PC
		RI_RIDER_IDX[RIDER_COUNT] = In.RI_ADD_CC_IND*4 + In.SEX*2 + In.SMOKER_STAT + 1
		RIDER_COUNT = RIDER_COUNT + 1
	}
	//rider 7
	if (In.MEDICAL_BEN > 0 || In.PLAN_MED > 0) && RIDER_SEL_MEDICAL == 1 {
		RIDER_IDX[RIDER_COUNT] = 7
		RIDER_SA[RIDER_COUNT] = MEDICAL_BEN2
		RIDER_PREM[RIDER_COUNT] = 0
		RIDER_POL_TERM_M[RIDER_COUNT] = (In.MAX_AGE_HS - In.AGE_AT_ENTRY + 1) * 12
		RIDER_PREM_TERM_M[RIDER_COUNT] = 0
		RIDER_VERSION_IDX[RIDER_COUNT] = In.HSPLUS_IND + 1
		RIDER_BEN_IDX[RIDER_COUNT] = ReadCacheInt("rider_med_index", strconv.Itoa(In.PLAN_MED), strconv.Itoa(CURR_IND), strconv.Itoa(In.SEX), "MEX_IND")
		RIDER_LOAD_PC[RIDER_COUNT] = float64(In.HS_LOAD_PERC) * 100
		RIDER_LOAD_AMT[RIDER_COUNT] = 0
		RI_RIDER_CED_PC[RIDER_COUNT] = In.RI_PRU_HS_BEN_PC
		RI_RIDER_IDX[RIDER_COUNT] = In.RI_WAI2_IND*4 + In.SEX*2 + In.SMOKER_STAT + 1
		RIDER_COUNT = RIDER_COUNT + 1
	}
	//rider 8
	if TERM_LIFE3_IND == 0 {
		if In.TERM_BEN > 0 && RIDER_SEL_TERM1 == 1 {
			RIDER_IDX[RIDER_COUNT] = 8
			RIDER_SA[RIDER_COUNT] = In.TERM_BEN
			RIDER_PREM[RIDER_COUNT] = 0
			RIDER_POL_TERM_M[RIDER_COUNT] = (In.MAX_AGE_TERM - In.AGE_AT_ENTRY + 1) * 12
			RIDER_PREM_TERM_M[RIDER_COUNT] = 0
			RIDER_VERSION_IDX[RIDER_COUNT] = In.COI_TERM_DISCOUNT_TYPE + 1
			RIDER_BEN_IDX[RIDER_COUNT] = In.SEX*2 + 2 - In.SMOKER_STAT
			RIDER_LOAD_PC[RIDER_COUNT] = In.TERM_LOAD_PERC * 100
			RIDER_LOAD_AMT[RIDER_COUNT] = In.TERM_LOAD_ADJ
			if RIDER_SEL_GIO_TERM == 1 {
				RIDER_SA_GIO[RIDER_COUNT] = ReadCacheFloat("campaign_gio_2", pol_num, "TERM_BEN_GIO")
				RIDER_SA_XSA[RIDER_COUNT] = ReadCacheFloat("campaign_xsa", pol_num, "TERM_BEN_XSA")
				RIDER_POL_TERM_M_GIO[RIDER_COUNT] = ReadCacheFloat("campaign_gio_2", pol_num, "GIO_EXTRA_MORB_TERM_M_ADD_CC") + float64(In.DURATIONIF_M)
				RIDER_POL_TERM_M_XSA[RIDER_COUNT] = ReadCacheFloat("campaign_xsa", pol_num, "XSA_EXTRA_MORB_TERM_M_ADD_CC") + float64(In.DURATIONIF_M)
			}
			RI_RIDER_CED_PC[RIDER_COUNT] = In.RI_TERM_BEN_PC
			RI_RIDER_IDX[RIDER_COUNT] = In.RI_TERM_IND*4 + In.SEX*2 + In.SMOKER_STAT + 1
			RIDER_COUNT = RIDER_COUNT + 1
		}
	}
	//rider9
	if (In.MEDICAL_BEN > 0 || In.PLAN_MED > 0) && RIDER_SEL_REIN == 1 {
		RIDER_IDX[RIDER_COUNT] = 9
		RIDER_SA[RIDER_COUNT] = REIN_BEN
		RIDER_PREM[RIDER_COUNT] = 0
		RIDER_POL_TERM_M[RIDER_COUNT] = (MAX_AGE_MED - In.AGE_AT_ENTRY + 1) * 12
		RIDER_PREM_TERM_M[RIDER_COUNT] = 0
		RIDER_VERSION_IDX[RIDER_COUNT] = 0
		RIDER_BEN_IDX[RIDER_COUNT] = 0
		RIDER_LOAD_PC[RIDER_COUNT] = 0
		RIDER_LOAD_AMT[RIDER_COUNT] = 0
		RI_RIDER_CED_PC[RIDER_COUNT] = 0
		RI_RIDER_IDX[RIDER_COUNT] = 0
		RIDER_COUNT = RIDER_COUNT + 1
	}
	//rider10
	if In.MCC_BEN > 0 && RIDER_SEL_MCC == 1 {
		RIDER_IDX[RIDER_COUNT] = 10
		RIDER_SA[RIDER_COUNT] = In.MCC_BEN
		RIDER_PREM[RIDER_COUNT] = 0
		if TEMP_RIDER_MAX_AGE_IND == "Y" {
			RIDER_POL_TERM_M[RIDER_COUNT] = (In.MAX_AGE_MCC - In.AGE_AT_ENTRY + 1) * 12
		} else {
			RIDER_POL_TERM_M[RIDER_COUNT] = (In.MCC_EXP-In.AGE_AT_ENTRY+1)*12 - 12
		}
		RIDER_PREM_TERM_M[RIDER_COUNT] = 0
		RIDER_VERSION_IDX[RIDER_COUNT] = 0
		RIDER_BEN_IDX[RIDER_COUNT] = In.SEX*2 + In.SMOKER_STAT + 1
		RIDER_LOAD_PC[RIDER_COUNT] = In.MCC_LOAD_PERC * 100
		RIDER_LOAD_AMT[RIDER_COUNT] = In.MCC_LOAD_ADJ
		RI_RIDER_CED_PC[RIDER_COUNT] = In.RI_MCC_BEN_PC
		RI_RIDER_IDX[RIDER_COUNT] = In.RI_MCC_IND*4 + In.SEX*2 + In.SMOKER_STAT + 1
		RIDER_COUNT = RIDER_COUNT + 1
	}
	//rider11
	if In.CINCOME_BEN > 0 && RIDER_SEL_CINCOME == 1 {
		RIDER_IDX[RIDER_COUNT] = 11
		RIDER_SA[RIDER_COUNT] = In.CINCOME_BEN
		RIDER_PREM[RIDER_COUNT] = 0
		if TEMP_RIDER_MAX_AGE_IND == "Y" {
			RIDER_POL_TERM_M[RIDER_COUNT] = (In.MAX_AGE_CINCOME - In.AGE_AT_ENTRY + 1) * 12
		} else {
			RIDER_POL_TERM_M[RIDER_COUNT] = (In.CINCOME_EXP - In.AGE_AT_ENTRY + 1) * 12
		}
		RIDER_PREM_TERM_M[RIDER_COUNT] = 0
		RIDER_VERSION_IDX[RIDER_COUNT] = 0
		RIDER_BEN_IDX[RIDER_COUNT] = ReadCacheInt("rider_wp_index", strconv.Itoa(WP_CODE), strconv.Itoa(In.CINCOME_EXP), strconv.Itoa(In.SEX), strconv.Itoa(In.SMOKER_STAT), "0", "CINCOME_IND")
		RIDER_LOAD_PC[RIDER_COUNT] = In.CINC_LOAD_PERC * 100
		RIDER_LOAD_AMT[RIDER_COUNT] = In.CINC_LOAD_ADJ
		RI_RIDER_CED_PC[RIDER_COUNT] = In.RI_CINCOME_BEN_PC
		RI_RIDER_IDX[RIDER_COUNT] = In.RI_CI_IND*4 + In.SEX*2 + In.SMOKER_STAT + 1
		RIDER_COUNT = RIDER_COUNT + 1
	}
	//rider12
	if In.ESCC_BEN > 0 && RIDER_SEL_ESCC == 1 {
		RIDER_IDX[RIDER_COUNT] = 12
		RIDER_SA[RIDER_COUNT] = In.ESCC_BEN
		RIDER_PREM[RIDER_COUNT] = 0
		if TEMP_RIDER_MAX_AGE_IND == "Y" {
			RIDER_POL_TERM_M[RIDER_COUNT] = (In.MAX_AGE_ESCC - In.AGE_AT_ENTRY + 1) * 12
		} else {
			RIDER_POL_TERM_M[RIDER_COUNT] = (In.ESCC_EXP-In.AGE_AT_ENTRY+1)*12 - 12
		}
		RIDER_PREM_TERM_M[RIDER_COUNT] = 0
		RIDER_VERSION_IDX[RIDER_COUNT] = In.ESCC_PLUS_IND + 1
		RIDER_BEN_IDX[RIDER_COUNT] = In.SEX*2 + In.SMOKER_STAT + 1
		RIDER_LOAD_PC[RIDER_COUNT] = In.ESCC_LOAD_PERC * 100
		RIDER_LOAD_AMT[RIDER_COUNT] = In.ESCC_LOAD_ADJ
		if RIDER_SEL_GIO_ESCC == 1 {
			RIDER_SA_GIO[RIDER_COUNT] = ReadCacheFloat("campaign_gio_2", pol_num, "ESCC_BEN_GIO")
			RIDER_SA_XSA[RIDER_COUNT] = ReadCacheFloat("campaign_xsa", pol_num, "ESCC_BEN_XSA")
			RIDER_POL_TERM_M_GIO[RIDER_COUNT] = ReadCacheFloat("campaign_gio_2", pol_num, "GIO_EXTRA_MORB_TERM_M_ESCC") + float64(In.DURATIONIF_M)
			RIDER_POL_TERM_M_XSA[RIDER_COUNT] = ReadCacheFloat("campaign_xsa", pol_num, "XSA_EXTRA_MORB_TERM_M_ESCC") + float64(In.DURATIONIF_M)
		}
		RI_RIDER_CED_PC[RIDER_COUNT] = In.RI_ESCC_BEN_PC
		if In.CICA_ESCC_ALT_IND == 1 || In.CICA_ESCC_IND == 0 || In.ESCC_PLUS_IND == 0 {
			RI_RIDER_IDX[RIDER_COUNT] = In.RI_ESCC_IND*8 + (RIDER_BEN_IDX[RIDER_COUNT]-1)*2 + In.ESCC_PLUS_IND + 1
		} else {
			RI_RIDER_IDX[RIDER_COUNT] = RIDER_BEN_IDX[RIDER_COUNT] + 34
		}
		RIDER_COUNT = RIDER_COUNT + 1
	}
	//rider13
	if In.PLAN_PRNTL > 0 && RIDER_SEL_PRNTL == 1 {
		RIDER_IDX[RIDER_COUNT] = 13
		RIDER_SA[RIDER_COUNT] = Out.TEMP_PRNTL_BEN
		RIDER_PREM[RIDER_COUNT] = 0
		if TEMP_RIDER_MAX_AGE_IND == "Y" {
			RIDER_POL_TERM_M[RIDER_COUNT] = (In.MAX_AGE_PNTL - In.AGE_AT_ENTRY + 1) * 12
		} else {
			RIDER_POL_TERM_M[RIDER_COUNT] = (In.MAX_AGE_PNTL-In.AGE_AT_ENTRY+1)*12 - 12
		}
		RIDER_PREM_TERM_M[RIDER_COUNT] = 0
		RIDER_VERSION_IDX[RIDER_COUNT] = 0
		RIDER_BEN_IDX[RIDER_COUNT] = In.PLAN_PRNTL
		RIDER_LOAD_PC[RIDER_COUNT] = 0
		RIDER_LOAD_AMT[RIDER_COUNT] = 0
		RI_RIDER_CED_PC[RIDER_COUNT] = In.RI_PRU_PRNTL_BEN_PC
		RI_RIDER_IDX[RIDER_COUNT] = 0
		RIDER_COUNT = RIDER_COUNT + 1
	}
	//rider14
	if In.JUVCI_BEN > 0 && RIDER_SEL_JUVCI == 1 {
		RIDER_IDX[RIDER_COUNT] = 14
		RIDER_SA[RIDER_COUNT] = In.JUVCI_BEN
		RIDER_PREM[RIDER_COUNT] = 0
		if TEMP_RIDER_MAX_AGE_IND == "Y" {
			RIDER_POL_TERM_M[RIDER_COUNT] = (int(In.JUVCI_BEN) - In.AGE_AT_ENTRY + 1) * 12
		} else {
			RIDER_POL_TERM_M[RIDER_COUNT] = (int(In.JUVCI_BEN)-In.AGE_AT_ENTRY+1)*12 - 12
		}
		RIDER_PREM_TERM_M[RIDER_COUNT] = 0
		RIDER_VERSION_IDX[RIDER_COUNT] = 0
		RIDER_BEN_IDX[RIDER_COUNT] = In.SEX*2 + In.SMOKER_STAT + 1
		RIDER_LOAD_PC[RIDER_COUNT] = In.JCC_LOAD_PERC * 100
		RIDER_LOAD_AMT[RIDER_COUNT] = In.JCC_LOAD_ADJ
		RI_RIDER_CED_PC[RIDER_COUNT] = In.RI_PRU_JUVCI_BEN_PC
		RI_RIDER_IDX[RIDER_COUNT] = 0
		RIDER_COUNT = RIDER_COUNT + 1
	}
	//rider15
	if In.PEP_BEN_FIX > 0 && RIDER_SEL_PEP1 == 1 {
		var CESS_AGE_PEP1 int
		CESS_AGE_PEP1 = In.LIFE2_AGE_AE + max((In.MAX_AGE_PEP1-In.AGE_AT_ENTRY), 10)
		RIDER_IDX[RIDER_COUNT] = 15
		RIDER_SA[RIDER_COUNT] = In.PEP_BEN_FIX
		RIDER_PREM[RIDER_COUNT] = 0
		RIDER_POL_TERM_M[RIDER_COUNT] = (In.MAX_AGE_PEP1 - In.AGE_AT_ENTRY + 1) * 12
		RIDER_PREM_TERM_M[RIDER_COUNT] = 0
		RIDER_VERSION_IDX[RIDER_COUNT] = 0
		RIDER_BEN_IDX[RIDER_COUNT] = ReadCacheInt("rider_pep_index", strconv.Itoa(PEP1_CODE), strconv.Itoa(CESS_AGE_PEP1), strconv.Itoa(In.LIFE2_AGE_AE), "PEP1_IND")
		RIDER_LOAD_PC[RIDER_COUNT] = In.EDU_PAR1_LOAD_PERC * 100
		RIDER_LOAD_AMT[RIDER_COUNT] = In.EDU_PAR1_LOAD_ADJ
		RI_RIDER_CED_PC[RIDER_COUNT] = In.RI_PEP1_BEN_PC
		if In.RI_TABLE_IND == 1 {
			if TEMP_SW_RI_IND == "Y" {
				RI_RIDER_IDX[RIDER_COUNT] = In.SEX_2 + 1
			} else {
				RI_RIDER_IDX[RIDER_COUNT] = In.SEX + 1
			}
		} else {
			RI_RIDER_IDX[RIDER_COUNT] = 3
		}
		RIDER_COUNT = RIDER_COUNT + 1
	}
	//rider16
	if In.PEP_BEN_FIX > 0 && In.PEP_BEN_FIX2 > 0 && RIDER_SEL_PEP2 == 1 {
		var CESS_AGE_PEP2 int
		CESS_AGE_PEP2 = In.LIFE2_AGE_AE + max((In.MAX_AGE_PEP1-In.AGE_AT_ENTRY), 10)
		RIDER_IDX[RIDER_COUNT] = 16
		RIDER_SA[RIDER_COUNT] = In.PEP_BEN_FIX2
		RIDER_PREM[RIDER_COUNT] = 0
		RIDER_POL_TERM_M[RIDER_COUNT] = (In.MAX_AGE_PEP2 - In.AGE_AT_ENTRY + 1) * 12
		RIDER_PREM_TERM_M[RIDER_COUNT] = 0
		RIDER_VERSION_IDX[RIDER_COUNT] = 0
		RIDER_BEN_IDX[RIDER_COUNT] = ReadCacheInt("rider_pep_index", strconv.Itoa(PEP2_CODE), strconv.Itoa(CESS_AGE_PEP2), strconv.Itoa(In.LIFE3_AGE_AE), "PEP2_IND")
		RIDER_LOAD_PC[RIDER_COUNT] = In.EDU_PAR2_LOAD_PERC * 100
		RIDER_LOAD_AMT[RIDER_COUNT] = In.EDU_PAR2_LOAD_ADJ
		RI_RIDER_CED_PC[RIDER_COUNT] = In.RI_PEP2_BEN_PC
		if In.RI_TABLE_IND == 1 {
			if TEMP_SW_RI_IND == "Y" {
				RI_RIDER_IDX[RIDER_COUNT] = In.SEX_3 + 1
			} else {
				RI_RIDER_IDX[RIDER_COUNT] = In.SEX + 1
			}
		} else {
			RI_RIDER_IDX[RIDER_COUNT] = 3
		}
		RIDER_COUNT = RIDER_COUNT + 1
	}
	//rider17
	if In.CCB61_BEN > 0 && RIDER_SEL_CCB61 == 1 {
		RIDER_IDX[RIDER_COUNT] = 17
		RIDER_SA[RIDER_COUNT] = In.CCB61_BEN
		RIDER_PREM[RIDER_COUNT] = 0

		if TEMP_RIDER_MAX_AGE_IND == "Y" {
			RIDER_POL_TERM_M[RIDER_COUNT] = (In.MAX_AGE_CCB61 - In.AGE_AT_ENTRY + 1) * 12
		} else {
			RIDER_POL_TERM_M[RIDER_COUNT] = (In.CCB61_EXP-In.AGE_AT_ENTRY+1)*12 - 12
		}
		RIDER_PREM_TERM_M[RIDER_COUNT] = 0
		RIDER_VERSION_IDX[RIDER_COUNT] = In.CICA_CCB61_IND + 1
		RIDER_BEN_IDX[RIDER_COUNT] = In.SEX*2 + In.SMOKER_STAT + 1
		RIDER_LOAD_PC[RIDER_COUNT] = In.CC61_LOAD_PERC * 100
		RIDER_LOAD_AMT[RIDER_COUNT] = In.CC61_LOAD_ADJ
		if RIDER_SEL_GIO_CCB61 == 1 {
			RIDER_SA_GIO[RIDER_COUNT] = ReadCacheFloat("campaign_gio_2", pol_num, "CCB_61_BEN_GIO")
			RIDER_SA_XSA[RIDER_COUNT] = ReadCacheFloat("campaign_xsa", pol_num, "CCB_61_BEN_XSA")
			RIDER_POL_TERM_M_GIO[RIDER_COUNT] = ReadCacheFloat("campaign_gio_2", pol_num, "GIO_EXTRA_MORB_TERM_M_CCB61") + float64(In.DURATIONIF_M)
			RIDER_POL_TERM_M_XSA[RIDER_COUNT] = ReadCacheFloat("campaign_xsa", pol_num, "XSA_EXTRA_MORB_TERM_M_CCB61") + float64(In.DURATIONIF_M)
		}
		RI_RIDER_CED_PC[RIDER_COUNT] = In.RI_CCB61_BEN_PC
		if In.CICA_CCB61_IND == 0 || In.CICA_CCB61_ALT_IND == 1 {
			RI_RIDER_IDX[RIDER_COUNT] = (In.SEX*2 + In.SMOKER_STAT) + 1
		} else {
			RI_RIDER_IDX[RIDER_COUNT] = (In.SEX*2 + In.SMOKER_STAT) + 1 + 4
		}
		RIDER_COUNT = RIDER_COUNT + 1
	}
	//rider18
	if In.CI_BEN > 0 && RIDER_SEL_CI == 1 {
		RIDER_IDX[RIDER_COUNT] = 18
		RIDER_SA[RIDER_COUNT] = In.CI_BEN
		RIDER_PREM[RIDER_COUNT] = 0
		RIDER_POL_TERM_M[RIDER_COUNT] = (int(In.MAX_AGE_CI) - In.AGE_AT_ENTRY + 1) * 12
		RIDER_PREM_TERM_M[RIDER_COUNT] = 0
		RIDER_VERSION_IDX[RIDER_COUNT] = 0
		RIDER_BEN_IDX[RIDER_COUNT] = In.SEX*6 + int(In.PLAN_CI)
		RIDER_LOAD_PC[RIDER_COUNT] = In.CIR_LOAD_PERC * 100
		RIDER_LOAD_AMT[RIDER_COUNT] = 0

		RI_RIDER_CED_PC[RIDER_COUNT] = In.RI_CI_BEN_PC
		if MEDICAL_BEN2 > 0 && In.RI_PRU_HS_BEN_PC > 0 && In.HSPLUS_IND <= 1 {
			RI_RIDER_IDX[RIDER_COUNT] = int(In.PLAN_CI-1)*16 + (In.PLAN_MED-1)*2 + (In.SEX) + 1 + 12
		} else {
			RI_RIDER_IDX[RIDER_COUNT] = int(In.PLAN_CI-1)*2 + (In.SEX) + 1
		}
		RIDER_COUNT = RIDER_COUNT + 1
	}
	//rider19
	if In.TPD_BEN > 0 && RIDER_SEL_TPD == 1 {
		RIDER_IDX[RIDER_COUNT] = 19
		RIDER_SA[RIDER_COUNT] = In.TPD_BEN
		RIDER_PREM[RIDER_COUNT] = 0
		if TEMP_RIDER_MAX_AGE_IND == "Y" {
			RIDER_POL_TERM_M[RIDER_COUNT] = (int(In.MAX_AGE_TPD) - In.AGE_AT_ENTRY + 1) * 12
		} else {
			RIDER_POL_TERM_M[RIDER_COUNT] = (int(In.TPD_EXP)-In.AGE_AT_ENTRY+1)*12 - 12
		}
		RIDER_PREM_TERM_M[RIDER_COUNT] = 0
		RIDER_VERSION_IDX[RIDER_COUNT] = 0
		RIDER_BEN_IDX[RIDER_COUNT] = In.SEX*2 + In.SMOKER_STAT + 1
		RIDER_LOAD_PC[RIDER_COUNT] = In.TPDD_LOAD_PERC * 100
		RIDER_LOAD_AMT[RIDER_COUNT] = 0
		RI_RIDER_CED_PC[RIDER_COUNT] = In.RI_TPD_BEN_PC
		RI_RIDER_IDX[RIDER_COUNT] = 0
		RIDER_COUNT = RIDER_COUNT + 1
	}
	//rider20
	if In.PPH_PLUS_PRO_BEN > 0 && RIDER_SEL_PPH_PLUS == 1 {
		RIDER_IDX[RIDER_COUNT] = 20
		RIDER_SA[RIDER_COUNT] = 1000
		RIDER_PREM[RIDER_COUNT] = 0
		RIDER_POL_TERM_M[RIDER_COUNT] = (In.MAX_AGE_PPH_PLUS - In.AGE_AT_ENTRY + 1) * 12
		RIDER_PREM_TERM_M[RIDER_COUNT] = 0
		RIDER_VERSION_IDX[RIDER_COUNT] = In.SEX*11 + In.PPH2_PLAN_MED
		RIDER_BEN_IDX[RIDER_COUNT] = In.PPH_PLUS_IND*2 + In.PPH2_HFA_IND + 1
		RIDER_LOAD_PC[RIDER_COUNT] = float64(In.HS_LOAD_PERC) * 100
		RIDER_LOAD_AMT[RIDER_COUNT] = 0
		RI_RIDER_CED_PC[RIDER_COUNT] = In.RI_PPH_PLUS_BEN_PC
		RI_RIDER_IDX[RIDER_COUNT] = 0
		RIDER_COUNT = RIDER_COUNT + 1
	}
	//rider21
	if In.ESCC_BEN > 0 && In.CICA_ESCC_IND > 0 && RIDER_SEL_CICA_ESCC == 1 {
		RIDER_IDX[RIDER_COUNT] = 21
		RIDER_SA[RIDER_COUNT] = In.ESCC_BEN
		RIDER_PREM[RIDER_COUNT] = 0
		if TEMP_RIDER_MAX_AGE_IND == "Y" {
			RIDER_POL_TERM_M[RIDER_COUNT] = (In.MAX_AGE_ESCC - In.AGE_AT_ENTRY + 1) * 12
		} else {
			RIDER_POL_TERM_M[RIDER_COUNT] = (In.ESCC_EXP-In.AGE_AT_ENTRY+1)*12 - 12
		}
		RIDER_PREM_TERM_M[RIDER_COUNT] = 0
		RIDER_VERSION_IDX[RIDER_COUNT] = In.ESCC_PLUS_IND + 1
		RIDER_BEN_IDX[RIDER_COUNT] = In.SEX*2 + In.SMOKER_STAT + 1
		RIDER_LOAD_PC[RIDER_COUNT] = In.CICA_ESCC_LOAD_PERC * 100
		RIDER_LOAD_AMT[RIDER_COUNT] = In.CICA_ESCC_LOAD_ADJ
		if RIDER_SEL_GIO_CICA_ESCC == 1 {
			RIDER_SA_GIO[RIDER_COUNT] = ReadCacheFloat("campaign_gio_2", pol_num, "CICA_ESCC_BEN_GIO")
			RIDER_SA_XSA[RIDER_COUNT] = ReadCacheFloat("campaign_xsa", pol_num, "CICA_ESCC_BEN_XSA")
			RIDER_POL_TERM_M_GIO[RIDER_COUNT] = ReadCacheFloat("campaign_gio_2", pol_num, "GIO_EXTRA_MORB_TERM_M_CICA_ESCC") + float64(In.DURATIONIF_M)
			RIDER_POL_TERM_M_XSA[RIDER_COUNT] = ReadCacheFloat("campaign_xsa", pol_num, "XSA_EXTRA_MORB_TERM_M_CICA_ESCC") + float64(In.DURATIONIF_M)
		}
		RI_RIDER_CED_PC[RIDER_COUNT] = In.RI_CICA_ESCC_BEN_PC
		RI_RIDER_IDX[RIDER_COUNT] = 0
		RIDER_COUNT = RIDER_COUNT + 1
	}
	//rider22
	if In.CCB61_BEN > 0 && In.CICA_CCB61_IND > 0 && RIDER_SEL_CICA_CCB61 == 1 {
		RIDER_IDX[RIDER_COUNT] = 22
		RIDER_SA[RIDER_COUNT] = In.CCB61_BEN
		RIDER_PREM[RIDER_COUNT] = 0
		if TEMP_RIDER_MAX_AGE_IND == "Y" {
			RIDER_POL_TERM_M[RIDER_COUNT] = (In.MAX_AGE_CCB61 - In.AGE_AT_ENTRY + 1) * 12
		} else {
			RIDER_POL_TERM_M[RIDER_COUNT] = (In.CCB61_EXP-In.AGE_AT_ENTRY+1)*12 - 12
		}
		RIDER_PREM_TERM_M[RIDER_COUNT] = 0
		RIDER_VERSION_IDX[RIDER_COUNT] = In.CICA_CCB61_IND + 1
		RIDER_BEN_IDX[RIDER_COUNT] = In.SEX*2 + In.SMOKER_STAT + 1
		RIDER_LOAD_PC[RIDER_COUNT] = In.CICA_CCB61_LOAD_PERC * 100
		RIDER_LOAD_AMT[RIDER_COUNT] = In.CICA_CCB61_LOAD_ADJ
		if RIDER_SEL_GIO_CICA_CCB61 == 1 {
			RIDER_SA_GIO[RIDER_COUNT] = ReadCacheFloat("campaign_gio_2", pol_num, "CICA_CCB61_BEN_GIO")
			RIDER_SA_XSA[RIDER_COUNT] = ReadCacheFloat("campaign_xsa", pol_num, "CICA_CCB61_BEN_XSA")
			RIDER_POL_TERM_M_GIO[RIDER_COUNT] = ReadCacheFloat("campaign_gio_2", pol_num, "GIO_EXTRA_MORB_TERM_M_CICA_CCB61") + float64(In.DURATIONIF_M)
			RIDER_POL_TERM_M_XSA[RIDER_COUNT] = ReadCacheFloat("campaign_xsa", pol_num, "XSA_EXTRA_MORB_TERM_M_CICA_CCB61") + float64(In.DURATIONIF_M)
		}
		RI_RIDER_CED_PC[RIDER_COUNT] = In.RI_CICA_CCB61_BEN_PC
		RI_RIDER_IDX[RIDER_COUNT] = (In.CICA_CCB61_ALT_IND)*4 + (In.SEX) + (In.SMOKER_STAT) + 1
		RIDER_COUNT = RIDER_COUNT + 1
	}
	//rider23
	if In.ADD_CC_BEN > 0 && In.CICA_CCB34_IND > 0 && RIDER_SEL_CICA_CCB34 == 1 {
		RIDER_IDX[RIDER_COUNT] = 23
		RIDER_SA[RIDER_COUNT] = In.ADD_CC_BEN
		RIDER_PREM[RIDER_COUNT] = 0
		if TEMP_RIDER_MAX_AGE_IND == "Y" {
			RIDER_POL_TERM_M[RIDER_COUNT] = (In.MAX_AGE_ADD_CC - In.AGE_AT_ENTRY + 1) * 12
		} else {
			RIDER_POL_TERM_M[RIDER_COUNT] = (In.MAX_AGE_ADD_CC-In.AGE_AT_ENTRY+1)*12 - 12
		}
		RIDER_PREM_TERM_M[RIDER_COUNT] = 0
		RIDER_VERSION_IDX[RIDER_COUNT] = 0
		if LIMIT_PAY_IND == 1 {
			RIDER_BEN_IDX[RIDER_COUNT] = ReadCacheInt("rider_cc_index", strconv.Itoa(In.PLAN_CC), strconv.Itoa(In.SEX), strconv.Itoa(In.SMOKER_STAT), "CC_IND")
		} else {
			RIDER_BEN_IDX[RIDER_COUNT] = ReadCacheInt("rider_cc_index", strconv.Itoa(In.PLAN_CCP), strconv.Itoa(In.SEX), strconv.Itoa(In.SMOKER_STAT), "CCP_IND")
		}
		RIDER_LOAD_PC[RIDER_COUNT] = In.CICA_CCB34_LOAD_PERC * 100
		RIDER_LOAD_AMT[RIDER_COUNT] = In.CICA_CCB34_LOAD_ADJ
		if RIDER_SEL_GIO_CICA_CCB34 == 1 {
			RIDER_SA_GIO[RIDER_COUNT] = ReadCacheFloat("campaign_gio_2", pol_num, "CICA_CCB34_BEN_GIO")
			RIDER_SA_XSA[RIDER_COUNT] = ReadCacheFloat("campaign_xsa", pol_num, "CICA_CCB34_BEN_XSA")
			RIDER_POL_TERM_M_GIO[RIDER_COUNT] = ReadCacheFloat("campaign_gio_2", pol_num, "GIO_EXTRA_MORB_TERM_M_CICA_CCB34") + float64(In.DURATIONIF_M)
			RIDER_POL_TERM_M_XSA[RIDER_COUNT] = ReadCacheFloat("campaign_xsa", pol_num, "XSA_EXTRA_MORB_TERM_M_CICA_CCB34") + float64(In.DURATIONIF_M)
		}
		RI_RIDER_CED_PC[RIDER_COUNT] = In.RI_CICA_CCB34_BEN_PC
		RI_RIDER_IDX[RIDER_COUNT] = In.SEX*2 + In.SMOKER_STAT + 1
		RIDER_COUNT = RIDER_COUNT + 1
	}

	if In.PPH_PLUS_PRO_BEN > 0 && RIDER_SEL_PPH_PLUS_PRO == 1 {
		RIDER_IDX[RIDER_COUNT] = 24
		RIDER_SA[RIDER_COUNT] = 1000
		RIDER_PREM[RIDER_COUNT] = 0
		RIDER_POL_TERM_M[RIDER_COUNT] = (In.MAX_AGE_PPH_PLUS - In.AGE_AT_ENTRY + 1) * 12
		RIDER_PREM_TERM_M[RIDER_COUNT] = 0
		RIDER_VERSION_IDX[RIDER_COUNT] = In.SEX*11 + In.PPH2_PLAN_MED
		RIDER_BEN_IDX[RIDER_COUNT] = In.PPH_PLUS_IND*2 + In.PPH2_HFA_IND + 1
		RIDER_LOAD_PC[RIDER_COUNT] = float64(In.HS_LOAD_PERC) * 100
		RIDER_LOAD_AMT[RIDER_COUNT] = 0
		RI_RIDER_CED_PC[RIDER_COUNT] = 0
		RI_RIDER_IDX[RIDER_COUNT] = 0
		RIDER_COUNT = RIDER_COUNT + 1
	}
	//rider25
	if In.CC_BEN > 0 && RIDER_SEL_CC == 1 {
		RIDER_IDX[RIDER_COUNT] = 25
		RIDER_SA[RIDER_COUNT] = In.CC_BEN
		RIDER_PREM[RIDER_COUNT] = 0
		if TEMP_RIDER_MAX_AGE_IND == "Y" {
			RIDER_POL_TERM_M[RIDER_COUNT] = (In.CC_EXP - In.AGE_AT_ENTRY + 1) * 12
		} else {
			RIDER_POL_TERM_M[RIDER_COUNT] = (In.CC_EXP-In.AGE_AT_ENTRY)*12 - 1
		}
		RIDER_PREM_TERM_M[RIDER_COUNT] = 0
		RIDER_VERSION_IDX[RIDER_COUNT] = 0
		RIDER_BEN_IDX[RIDER_COUNT] = ReadCacheInt("rider_cc_index", strconv.Itoa(In.PLAN_CC), strconv.Itoa(In.SEX), strconv.Itoa(In.SMOKER_STAT), "CC_IND")
		RIDER_LOAD_PC[RIDER_COUNT] = In.CC_LOAD_PERC * 100
		RIDER_LOAD_AMT[RIDER_COUNT] = In.CC_LOAD_ADJ
		RI_RIDER_CED_PC[RIDER_COUNT] = In.RI_CC_BEN_PC
		if RI_CC_YN == 0 {
			RI_RIDER_IDX[RIDER_COUNT] = In.SEX*2 + In.SMOKER_STAT + 1
		} else {
			RI_RIDER_IDX[RIDER_COUNT] = (min(4, In.RI_CC_IND))*4 + In.SEX*2 + In.SMOKER_STAT + 1
		}
		RIDER_COUNT = RIDER_COUNT + 1
	}
	//rider4;
	if In.PWAI2_BEN > 0 && In.LIFE3_AGE_AE > 0 && (In.CESS_AGE_SP > 0 || PWAIV2_METHOD == 1) && RIDER_SEL_PWAIV3 == 1 {
		RIDER_IDX[RIDER_COUNT] = 26
		RIDER_SA[RIDER_COUNT] = In.PWAI2_BEN
		RIDER_PREM[RIDER_COUNT] = 0
		RIDER_POL_TERM_M[RIDER_COUNT] = (In.MAX_AGE_WAIV2 - In.AGE_AT_ENTRY + 1) * 12
		RIDER_VERSION_IDX[RIDER_COUNT] = In.WOP2_ESCC_IND
		RIDER_LOAD_PC[RIDER_COUNT] = In.PARENT_LOAD_PERC * 100
		RIDER_LOAD_AMT[RIDER_COUNT] = In.PARENT_LOAD_ADJ
		if TEMP_RIDER_MAX_AGE_IND == "Y" {
			if PWAIV2_METHOD == 1 {
				RIDER_BEN_IDX[RIDER_COUNT] = ReadCacheInt("rider_pwaiv2_method1", strconv.FormatFloat(In.SP_TERM, 'f', -1, 64), "RIDER_BEN_IDX")
				RIDER_PREM_TERM_M[RIDER_COUNT] = (int(In.SP_TERM) - 1) * 12
			} else {
				RIDER_BEN_IDX[RIDER_COUNT] = ReadCacheInt("rider_sp_index", strconv.Itoa(SP_CODE), strconv.Itoa(In.CESS_AGE_SP), strconv.Itoa(In.WOP2_ESCC_IND), "SP_IND")
				RIDER_POL_TERM_M[RIDER_COUNT] = (In.MAX_AGE_WAIV2 - In.AGE_AT_ENTRY) * 12
			}
		} else {
			if PWAIV2_METHOD == 1 {
				RIDER_BEN_IDX[RIDER_COUNT] = ReadCacheInt("rider_pwaiv2_method1", strconv.FormatFloat(In.SP_TERM, 'f', -1, 64), "RIDER_BEN_IDX")
				RIDER_PREM_TERM_M[RIDER_COUNT] = int(In.SP_TERM-1) * 12
			} else {
				RIDER_BEN_IDX[RIDER_COUNT] = ReadCacheInt("rider_sp_index", strconv.Itoa(SP_CODE), strconv.Itoa(In.CESS_AGE_SP), strconv.Itoa(In.WOP2_ESCC_IND), "SP_IND")
				if PWAIV2_METHOD == 2 {
					if In.CESS_AGE_SP == 10 {
						RIDER_POL_TERM_M[RIDER_COUNT] = (min(In.CESS_AGE_SP, In.MAX_AGE_WAIV2-In.AGE_AT_ENTRY+1)) * 12
					} else {
						RIDER_POL_TERM_M[RIDER_COUNT] = (min(In.CESS_AGE_SP, In.MAX_AGE_WAIV2) - In.AGE_AT_ENTRY + 1) * 12
					}
				} else {
					if In.CESS_AGE_SP == 10 || In.CESS_AGE_SP == 17 || In.CESS_AGE_SP == 24 {
						RIDER_POL_TERM_M[RIDER_COUNT] = min(In.CESS_AGE_SP, (In.MAX_AGE_WAIV2-In.AGE_AT_ENTRY+1)) * 12
					} else if In.CESS_AGE_SP > 25 {
						RIDER_POL_TERM_M[RIDER_COUNT] = (min((In.CESS_AGE_SP - In.LIFE3_AGE_AE), (In.MAX_AGE_WAIV2 - In.AGE_AT_ENTRY + 1))) * 12
					} else {
						RIDER_POL_TERM_M[RIDER_COUNT] = (In.MAX_AGE_WAIV2 - In.AGE_AT_ENTRY + 1) * 12
					}
				}
			}
		}
		RI_RIDER_CED_PC[RIDER_COUNT] = In.RI_PWAI2_BEN_PC
		RI_RIDER_IDX[RIDER_COUNT] = In.RI_TABLE_IND*4 + In.SEX*2 + In.SMOKER_STAT + 1
		RIDER_COUNT = RIDER_COUNT + 1
	}
	if TERM_LIFE3_IND == 1 {
		if In.TERM_BEN > 0 && RIDER_SEL_TERM2 == 1 {
			RIDER_IDX[RIDER_COUNT] = 27
			RIDER_SA[RIDER_COUNT] = In.TERM_BEN
			RIDER_PREM[RIDER_COUNT] = 0
			RIDER_POL_TERM_M[RIDER_COUNT] = (In.MAX_AGE_TERM - Out.AGE_AT_ENTRY2 + 1) * 12
			RIDER_PREM_TERM_M[RIDER_COUNT] = 0
			RIDER_VERSION_IDX[RIDER_COUNT] = In.COI_TERM_DISCOUNT_TYPE + 1
			RIDER_BEN_IDX[RIDER_COUNT] = In.SEX_2*2 + 2 - In.SMOKER_STAT_2
			RIDER_LOAD_PC[RIDER_COUNT] = In.TERM_LOAD_PERC * 100
			RIDER_LOAD_AMT[RIDER_COUNT] = In.TERM_LOAD_ADJ
			RI_RIDER_CED_PC[RIDER_COUNT] = In.RI_TERM_BEN_PC
			RI_RIDER_IDX[RIDER_COUNT] = In.RI_TERM_IND*4 + In.SEX_2*2 + In.SMOKER_STAT + 1
			RIDER_COUNT = RIDER_COUNT + 1
		}
		if (In.TERM_BEN > 0 || TEMP_SW_RI_IND == "Y") && In.TERM_BEN_3 > 0 && RIDER_SEL_TERM3 == 1 {
			RIDER_IDX[RIDER_COUNT] = 28
			RIDER_SA[RIDER_COUNT] = In.TERM_BEN_3
			RIDER_PREM[RIDER_COUNT] = 0
			RIDER_POL_TERM_M[RIDER_COUNT] = (In.MAX_AGE_TERM_3 - In.AGE_AT_ENTRY + 1) * 12
			RIDER_PREM_TERM_M[RIDER_COUNT] = 0
			RIDER_VERSION_IDX[RIDER_COUNT] = In.COI_TERM_DISCOUNT_TYPE + 1
			RIDER_BEN_IDX[RIDER_COUNT] = In.SEX_3*2 + 2 - In.SMOKER_STAT_3
			RIDER_LOAD_PC[RIDER_COUNT] = In.PAR2_TERM_LOAD_PERC * 100
			RIDER_LOAD_AMT[RIDER_COUNT] = In.PAR2_TERM_LOAD_ADJ
			RI_RIDER_CED_PC[RIDER_COUNT] = In.RI_TERM_BEN_PC
			RI_RIDER_IDX[RIDER_COUNT] = In.RI_TERM_IND*4 + In.SEX_3*2 + In.SMOKER_STAT + 1
			RIDER_COUNT = RIDER_COUNT + 1
		}
	}
	Out.NUM_OF_RIDERS = RIDER_COUNT
	DURATIONIF_PHOL := make([]float64, 1)
	Out.PART_SURR_IDX = ReadCacheInt("part_surr_idx", strconv.Itoa(PART_SURR_METHOD), strconv.Itoa(HYBRID_IND), strconv.Itoa(In.PW_IND_USED), "PART_SURR_IDX")
	if SWITCH_NB_MPF == "N" {
		DURATIONIF_PHOL[0] = ReadCacheFloat("premium_counter", pol_num, "DURATIONIF_PH")
		for i := 0; i <= 14; i++ {
			AltAnnPremA[i] = ReadCacheFloat("premium_counter", pol_num, "PREMIUM_"+strconv.Itoa(i+1))
			AltPremCounter[i] = ReadCacheFloat("premium_counter", pol_num, "COUNTER_"+strconv.Itoa(i+1))
		}
	}
	Out.SUM_ASSURED_GIO = ReadCacheFloat("campaign_gio_2", pol_num, "SUM_ASSURED_GIO")
	if Out.SUM_ASSURED_GIO == 0 {
		Out.GIO_BONUS_POL_TERM_M = 0
	} else {
		Out.GIO_BONUS_POL_TERM_M = ReadCacheInt("campaign_xsa", pol_num, "XSA_BONUS_TERM_M_SUM_ASSURED")
	}
	if UEPAAR_IND == 1 {
		if In.PPH_PLUS_PRO_BEN != 0 {
			Out.PPH_PLUS_BEN2 = 1000
		} else {
			Out.PPH_PLUS_PRO_BEN2 = 0
		}
		if In.PPH_PLUS_BEN != 0 {
			Out.PPH_PLUS_PRO_BEN2 = 1000
		} else {
			Out.PPH_PLUS_BEN2 = 0
		}
		if In.HSPLUS_IND != 0 || CURR_IND == 2 {
			Out.MEDICAL_BEN2 = In.MEDICAL_BEN
		} else {
			Out.MEDICAL_BEN2 = ReadCacheFloat("rider_medical_ben2", strconv.Itoa(In.PLAN_MED), "MEDICAL_BEN2")
		}
	} else {
		Out.MEDICAL_BEN2 = 0
		Out.PPH_PLUS_PRO_BEN2 = 0
		Out.PPH_PLUS_BEN2 = 0
	}
	if Out.MEDICAL_BEN2 != 0 || In.CI_BEN != 0 || Out.PPH_PLUS_BEN2 != 0 || Out.PPH_PLUS_PRO_BEN2 != 0 {
		Out.HS_POLICY_IND = 1
	} else {
		Out.HS_POLICY_IND = 0
	}
	if Out.MEDICAL_BEN2 > 0 || Out.PPH_PLUS_BEN2 > 0 || Out.PPH_PLUS_PRO_BEN2 > 0 {
		Out.DEDN_LBU_A_PP = ReadCacheFloat("dedn_lbu", strconv.Itoa(Out.EXP_A_IDX), strconv.Itoa(CURR_IND), "DEDN_LBU_A_PP")
	} else {
		Out.DEDN_LBU_A_PP = 0
	}
	if Out.MEDICAL_BEN2 > 0 || Out.PPH_PLUS_BEN2 > 0 {
		Out.DEDN_LBU_C_PP = ReadCacheFloat("dedn_lbu", strconv.Itoa(Out.EXP_C_IDX), strconv.Itoa(CURR_IND), "DEEDN_LBU_C_PP")
	} else {
		Out.DEDN_LBU_C_PP = 0
	}
	if NEW_MORT_TAB_IND == 0 {
		Out.DEDN_DISC_TIER = 0
	} else {
		Out.DEDN_DISC_TIER = 4
		for i := 0; i < 3; i++ {
			if float64(Out.SUM_ASSURED) < BasicCoiDiscTier[i] {
				Out.DEDN_DISC_TIER = i
				break
			}
		}
	}
	if UNIT_BONUS_METHOD == 0 {
		Out.BON_UNIT_IND = 0
	} else if UNIT_BONUS_METHOD == 1 {
		Out.BON_UNIT_IND = 1
	} else {
		Out.BON_UNIT_IND = In.LOY_BONUS_IND
	}

	for i := 0; i < RIDER_MAX; i++ {
		if i >= RIDER_COUNT {
			IFRS_RI_ICG_ID_TREATY_RID[i] = "-"
			TREATY_ID_TREATY_RID[i] = "-"
			IfrsRiderCode[i] = "-"
		} else {
			//todo:check
			IFRS_RI_ICG_ID_TREATY_RID[i] = RidRiIcg[RIDER_IDX[i]-1]
			TREATY_ID_TREATY_RID[i] = RidRiTreaty[RIDER_IDX[i]-1]
			IfrsRiderCode[i] = BenCode[RIDER_IDX[i]-1]
		}
	}

	for i := 0; i < RIDER_MAX; i++ {
		if i >= RIDER_COUNT {
			IFRS_RI_ICG_ID_TREATY_RID[i] = "-"
			TREATY_ID_TREATY_RID[i] = "-"
			IfrsRiderCode[i] = "-"
			IFRS_CCF_EXTERNAL[i] = 0
		} else {
			IFRS_RI_ICG_ID_TREATY_RID[i] = RidRiIcg[RIDER_IDX[i]-1]
			TREATY_ID_TREATY_RID[i] = RidRiTreaty[RIDER_IDX[i]-1]
			IfrsRiderCode[i] = BenCode[RIDER_IDX[i]-1]
			IFRS_CCF_EXTERNAL[i] = IfrsCcfExternal[3+RIDER_IDX[i]]
		}
	}
	IFRS_CCF_EXTERNAL[0] = IfrsCcfExternal[0]
	IFRS_CCF_EXTERNAL[1] = IfrsCcfExternal[1]
	IFRS_CCF_EXTERNAL[2] = IfrsCcfExternal[2]
	IFRS_CCF_EXTERNAL[3] = IfrsCcfExternal[3]

	Out.MAX_AGE_PEP2 = In.MAX_AGE_PEP2
	Out.MAX_AGE_PEP2 = In.MAX_AGE_PEP1
	Out.RI_RIDER_IDX = RI_RIDER_IDX
	Out.RIDER_BEN_IDX = RIDER_BEN_IDX
	Out.IFRS_RIDER_CODE = IfrsRiderCode
	Out.RI_BASE_IDX = RI_BASE_IDX
	Out.IFRS_CCF_EXTERNAL = IFRS_CCF_EXTERNAL
	Out.TREATY_ID_TREATY_RID = TREATY_ID_TREATY_RID
	Out.IFRS_RI_ICG_ID_TREATY_RID = IFRS_RI_ICG_ID_TREATY_RID
	Out.RI_RIDER_CED_PC = RI_RIDER_CED_PC
	Out.RIDER_IDX = RIDER_IDX
	Out.RIDER_SA = RIDER_SA
	Out.RIDER_PREM = RIDER_PREM
	Out.RIDER_POL_TERM_M = RIDER_POL_TERM_M
	Out.RIDER_PREM_TERM_M = RIDER_PREM_TERM_M
	Out.RIDER_VERSION_IDX = RIDER_VERSION_IDX
	Out.RIDER_LOAD_AMT = RIDER_LOAD_AMT
	Out.RIDER_LOAD_PC = RIDER_LOAD_PC
	Out.RIDER_SA_GIO = RIDER_SA_GIO
	Out.RIDER_SA_XSA = RIDER_SA_XSA
	Out.RIDER_POL_TERM_M_GIO = RIDER_POL_TERM_M_GIO
	Out.RIDER_POL_TERM_M_XSA = RIDER_POL_TERM_M_XSA
	Out.ALT_PREM_COUNTER = AltPremCounter
	Out.ALT_ANN_PREM_A = AltAnnPremA
	Out.DURATIONIF_PHOL = DURATIONIF_PHOL
	return mp, nil
}
